buildscript {
    
    repositories {
        mavenLocal()
		maven { url ossimMavenProxy }
        //maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.10"//3.0.11
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.12'
        classpath "io.ossim:gradleDefaults:${gradleDefaultsV}"
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.17.0"
    id "org.sonarqube" version "2.6.2"
}

subprojects { project ->
	// version projectVersion
	//group projectGroup
    
    
    
	boolean isGrailsApp = project.name.endsWith( '-app' )
	boolean isGrailsPlugin = project.name.endsWith( '-plugin' )
	boolean isGrailsProject = isGrailsApp || isGrailsPlugin

    apply plugin:"eclipse"
    apply plugin:"idea"

    apply plugin: "java"

	afterEvaluate {
		project.apply plugin: 'maven-publish'
		
		project.publish.dependsOn assemble
		project.publishToMavenLocal.dependsOn assemble
	}    



    io.ossim.gradleDefaults.Variables.setAdditionalVariables(project)
    io.ossim.gradleDefaults.Variables.setVersionVariables(project)
    version "${buildVersion}-${buildVersionTag}"

    jarDestination = "${project.projectDir}/build/libs/${project.name}-${version}.jar"
    sourceSets.main.output.classesDir = 'build/classes/groovy/main'

    if ( isGrailsApp )        
    {
        dockerBuildDir="${rootProject.projectDir}/docker"
        io.ossim.gradleDefaults.Docker.addDockerTasks(project, dockerRegistryUrl, dockerRegistryUsername, dockerRegistryPassword, name, dockerImageTag, dockerBuildDir, jarDestination, ["BASE_IMAGE": "${dockerRegistryUrl}/${dockerBaseImage}:${dockerFromTag}"])
        io.ossim.gradleDefaults.Openshift.addOpenshiftTasks(project, openshiftUrl, openshiftUsername, openshiftPassword, openshiftProjectName, openshiftServiceName,  dockerRegistryUrl, name, dockerImageTag)
                
    }
    else if ( isGrailsPlugin )
    {
        //io.ossim.gradleDefaults.Publications.addPublication(project, groupName, project.name, "${buildVersion}-${buildVersionTag}")
        //io.ossim.gradleDefaults.Publications.addRepository(project, mavenPublishUrl, mavenRepoUsername, mavenRepoPassword)

    }    
    

	if ( isGrailsProject )
	{
        apply plugin:"org.grails.grails-gsp"
        apply plugin:"org.grails.grails-plugin-publish"
        apply plugin:"asset-pipeline"
		if ( isGrailsApp )
		{
            apply plugin:"org.grails.grails-web"
            //apply plugin:"com.energizedwork.webdriver-binaries"
            //apply plugin:"com.energizedwork.idea-project-components"
		}
		else if ( isGrailsPlugin )
		{ 
            apply plugin:"org.grails.grails-plugin"
            
        }

        apply plugin:"asset-pipeline"
        apply plugin:"org.grails.grails-gsp"

        repositories 
        {
            mavenLocal()
		    maven { url ossimMavenProxy } 
            //maven { url "https://repo.grails.org/grails/core" }
        }

        dependencyManagement 
        {
			imports 
            {
                mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudDependencyV}"
			}
            applyMavenExclusions false
		}

        dependencies 
        {
            compile "org.springframework.cloud:spring-cloud-starter-hystrix"
            compile "org.springframework.boot:spring-boot-starter-web"
            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.grails:grails-core"
            compile "org.springframework.boot:spring-boot-starter-actuator"
            compile "org.springframework.boot:spring-boot-starter-tomcat"
            compile "org.grails:grails-web-boot"
            compile "org.grails:grails-logging"
            compile "org.grails:grails-plugin-rest"
            compile "org.grails:grails-plugin-databinding"
            compile "org.grails:grails-plugin-i18n"
            compile "org.grails:grails-plugin-services"
            compile "org.grails:grails-plugin-url-mappings"
            compile "org.grails:grails-plugin-interceptors"
            compile "org.grails.plugins:cache"
            compile "org.grails.plugins:async"
            compile "org.grails.plugins:scaffolding"
            compile "org.grails.plugins:gsp"
            console "org.grails:grails-console"
            runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineGrailsV}"
            testCompile "org.grails:grails-gorm-testing-support"
            testCompile "org.grails.plugins:geb"
            testCompile "org.grails:grails-web-testing-support"
            testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:${seleniumHtmlUnitDriverV}"
            testRuntime "net.sourceforge.htmlunit:htmlunit:${htmlUnitV}"

            if ( isGrailsApp )
            {
                compile "de.codecentric:spring-boot-admin-starter-client:${springBootAdminStarterClientV}"
                compile "org.springframework.cloud:spring-cloud-starter-config"
                compile "org.springframework.cloud:spring-cloud-starter-eureka"   
                compile "org.grails.plugins:events"
                compile "org.grails.plugins:hibernate5"
                compile "org.hibernate:hibernate-core:${hibernateCoreV}"   
                profile "org.grails.profiles:web"
                runtime "org.glassfish.web:el-impl:${elImplV}"
                runtime "com.h2database:h2"
                runtime "org.apache.tomcat:tomcat-jdbc"
            }
            else if ( isGrailsPlugin )
            { 
                compile "org.grails.plugins:actuator-ui:1.1"
                compile "io.swagger:swagger-annotations:1.5.15"
                compile "io.swagger:swagger-models:1.5.15"
                compile "org.webjars:swagger-ui:3.20.5"
                compile 'org.grails.plugins:swagger:1.0.0'
                compile "io.ossim.omar.plugins:omar-core-plugin:${latestGradleIdentifier}"
                profile "org.grails.profiles:web-plugin"
                provided "org.grails:grails-plugin-domain-class"
                testCompile "org.grails:grails-plugin-testing"


            }

        }
    }
         
    task wrapper(type: Wrapper) {
        gradleVersion = gradleWrapperVersion
    }

    bootRepackage.enabled = false

    assets {
        if ( isGrailsApp )
        {
            minifyJs = true
            minifyCss = true
            includes = ["fonts/*"]
            excludes = ["**/*-debug.js", "**/*-deps.js", "**/*.gz", "**/*.txt", "**/*.less", "**/*.html", "**/i18n/**", "**/",
                ".grunt/**", "**/locale/**", "webjars/jquery/2.1.4/src/intro.js", "webjars/jquery/2.1.4/src/outro.js"]
        }
        else if ( isGrailsPlugin )
        { 
            packagePlugin = true
        }
    }

    
}
